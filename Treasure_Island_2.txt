package hashtables;

import java.util.LinkedList;
import java.util.Queue;


public class TreasureIslandII {
	
	public static void main(String[] args) {
		char[][] grid = new char[][]{
			{'S', 'O', 'O', 'S', 'S'},
            {'D', 'O', 'D', 'O', 'D'},
            {'O', 'O', 'O', 'O', 'X'},
            {'X', 'D', 'D', 'O', 'O'},
            {'X', 'D', 'D', 'D', 'O'}};
		
		int result = treasureIsland(grid);
		System.out.println(String.format("%s (result)", result));
		
		char[][] grid2 = new char[][]{
			{'S', 'O', 'O', 'S', 'S'},
            {'D', 'O', 'D', 'O', 'O'},
            {'O', 'O', 'O', 'O', 'X'},
            {'X', 'D', 'D', 'O', 'O'},
            {'X', 'D', 'D', 'D', 'O'}};
		
		int result2 = treasureIsland(grid2);
		System.out.println(String.format("%s (result2)", result2));
		
		
	}

	public static int treasureIsland(char[][] grid) {

		if (grid == null || grid.length == 0)
			return 0;

		int rows = grid.length;
		int cols = grid[0].length;
		int minstep = Integer.MAX_VALUE;

		for (int i = 0; i < rows; i++) {
			for (int j = 0; j < cols; j++) {
				if (grid[i][j] == 'S') {
					minstep = Math.min(minstep, bfs(grid, i, j, rows, cols));
				}
			}
		}

		return minstep;
	}

	public static int bfs(char[][] grid, int row, int col, int rows, int cols) {

		char[][] visited = new char[grid.length][grid[0].length];
		Queue<Coordinate> queue = new LinkedList<>();
		int[][] dirs = new int[][] { { -1, 0 }, { 1, 0 }, { 0, -1 }, { 0, 1 } };

		visited[row][col] = 'V';
		queue.add(new Coordinate(row, col));
		int steps = 0;

		while (!queue.isEmpty()) {
			int size = queue.size();
			for (int i = 0; i < size; i++) {
				Coordinate point = queue.poll();
				int x = point.x;
				int y = point.y;
				if (grid[x][y] == 'X') {
					return steps;
				}
				for (int[] dir : dirs) {
					int newx = x + dir[0];
					int newy = y + dir[1];
					if (newx >= 0 && newx < rows && newy >= 0 && newy < cols && grid[newx][newy] != 'D'
							&& visited[newx][newy] != 'V') {
						visited[newx][newy] = 'V';
						queue.add(new Coordinate(newx, newy));
					}
				}
			}
			steps++;

		}

		return steps;

	}

}
