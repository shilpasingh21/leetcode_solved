package hashtables;

public class MaxOfMin {

	public static void main(String args[]) {

		int[][] grid1 = new int[][] { { 5, 1 }, { 4, 5 } }; // 4
		int[][] grid2 = new int[][] { { 5, 1, 7 }, { 4, 8, 5 } }; // 4
		int[][] grid3 = new int[][] { { 1, 9, 9 }, { 9, 9, 9 }, { 9, 9, 9 } }; // 1 (if the first entry is not
																				// considered)
		int[][] grid4 = new int[][] { { 10, 7, 3 }, { 12, 11, 9 }, { 1, 2, 8 } }; // 8 (same reason)
		int[][] grid5 = new int[][] { { 20, 20, 3 }, { 20, 3, 20 }, { 3, 20, 20 } }; // 3
		System.out.println("grid1: Expected: 4, Actual: " + maxScore2D(grid1));
		System.out.println("grid2: Expected: 4, Actual: " + maxScore2D(grid2));
		System.out.println(
				"grid3: Expected: 1, Actual: " + maxScore2D(grid3) + " (if the first entry is not considered)");
		System.out.println("grid4: Expected: 8, Actual: " + maxScore2D(grid4) + " (same reason)");
		System.out.println("grid5: Expected: 3, Actual: " + maxScore2D(grid5));

	}

	public static int maxScore2D(int[][] grid) {

		if (grid.length == 0 || grid == null) {
			return 0;
		}

		int rows = grid.length;
		int cols = grid[0].length;

		if (rows == 1 && cols == 1) {
			return 0;
		}

		int[][] dp = new int[grid.length][grid[0].length];

		// Init
		dp[0][0] = Integer.MAX_VALUE;

		for (int j = 1; j < cols; j++) {
			dp[0][j] = Math.min(grid[0][j - 1], grid[0][j]);
		}

		for (int i = 1; i < rows; i++) {
			dp[i][0] = Math.min(grid[i - 1][0], grid[i][0]);
		}

		for (int i = 1; i < rows; i++) {
			for (int j = 1; j < cols; j++) {
				if (i == rows - 1 && j == cols - 1) {
					dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]); // last entry is not considered
				} else {
					int score1 = Math.min(dp[i][j - 1], grid[i][j]); // left
					int score2 = Math.min(dp[i - 1][j], grid[i][j]); // up
					dp[i][j] = Math.max(score1, score2);
				}
			}
		}

		return dp[rows - 1][cols - 1];
	}

}

// Define: dp[i][j] is the max score from [0][0] to [i][j]
  // Recurence Formula: dp[i][j] = max( min(dp[i-1][j], grid[i][j]), min(dp[i][j-1]), grid[i][j] )
  // Note: Init the first entry as Integer.MAX_VALUE
  
  // DP (2D)
  // Time: O(rc) Space: O(rc)s



