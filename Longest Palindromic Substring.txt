class Solution {
    
    public String longestPalindrome(String s) {
        if(s == null || s.length() == 0) return "";
        
        int start =0;
        int end =0;
        
        for(int i=0;i<s.length();i++)
        {
            int len1 = expandFromMiddle(s,i,i);
            int len2 = expandFromMiddle(s,i,i+1);
            int len = Math.max(len1,len2);
            if(len > end - start)
            {
                start = i -((len -1) / 2);
                end = i + (len / 2);
            }
        }
        
        return s.substring(start,end + 1);
    }
    
    public int expandFromMiddle(String s,int left, int right){
        if(s == null || left > right) return 0;
        
        while(left >=0 && right<s.length() && s.charAt(left) == s.charAt(right))
        {
            left--;
            right++;
        }
        
        return right-left-1;
        
    }
}

Approach 4: Expand Around Center
In fact, we could solve it in O(n^2)O(n 
2
 ) time using only constant space.

We observe that a palindrome mirrors around its center. Therefore, a palindrome can be expanded from its center, and there are only 2n - 12n−1 such centers.

You might be asking why there are 2n - 12n−1 but not nn centers? The reason is the center of a palindrome can be in between two letters. Such palindromes have even number of letters (such as "abba") and its center are between the two 'b's.

Complexity Analysis

Time complexity : O(n^2)O(n 
2
 ). Since expanding a palindrome around its center could take O(n)O(n) time, the overall complexity is O(n^2)O(n 
2
 ).

Space complexity : O(1)O(1).