package hashtables;

import java.util.*;

public class CriticalRouters {

	static int time = 0;

	public static void main(String args[]) {

		int numRouters1 = 7;
		int numLinks1 = 7;
		int[][] links1 = { { 0, 1 }, { 0, 2 }, { 1, 3 }, { 2, 3 }, { 2, 5 }, { 5, 6 }, { 3, 4 } };
		System.out.println(getCriticalNodes(links1, numLinks1, numRouters1));
	}

	private static List<Integer> getCriticalNodes(int[][] links, int numLinks, int numRouters) {

		Map<Integer, Set<Integer>> map = new HashMap<>();
		for (int i = 0; i < numRouters; i++) {
			map.put(i, new HashSet<>());
		}
		for (int[] link : links) {
			map.get(link[0]).add(link[1]);
			map.get(link[1]).add(link[0]);
		}
		Set<Integer> set = new HashSet<>();
		int[] low = new int[numRouters];
		int[] disc = new int[numRouters];
		int parent[] = new int[numRouters];
		Arrays.fill(disc, -1);
		Arrays.fill(parent, -1);
		for (int i = 0; i < numRouters; i++) {
			if (disc[i] == -1)
				dfs(map, low, disc, parent, i, set);
		}
		return new ArrayList<>(set);
	}

	private static void dfs(Map<Integer, Set<Integer>> map, int[] low, int[] disc, int[] parent, int cur,
			Set<Integer> res) {
		int children = 0;
		disc[cur] = low[cur] = ++time;
		for (int nei : map.get(cur)) {
			if (disc[nei] == -1) {
				children++;
				parent[nei] = cur;
				dfs(map, low, disc, parent, nei, res);
				low[cur] = Math.min(low[cur], low[nei]);
				if ((parent[cur] == -1 && children > 1) || (parent[cur] != -1 && low[nei] >= disc[cur]))
					res.add(cur);
			} else if (nei != parent[cur])
				low[cur] = Math.min(low[cur], disc[nei]);
		}
	}
}



Approach: To find all the bridges for a given undirected graph, we use depth first traversal to visist each node.While we visit each node,we assign two values to it,discovery time 
disc and low value low.Discovery time basically indicates the time when the node is visited.low value for a node indicates whether there is some other early node (based on disc)
that can be visited by the subtree rooted with that node.We assign values to disc and low based on the time the node cur is visited.Then we assign cur as parent of nei which signifies that node nei is connected directly to node cur and is visited after visting node cur.If node nei is not already visited,visit nei next node by calling the function recusrively.Once all the nodes in the subtree of cur is visited,we update the low value as needed.Then we check whether the edge between cur and nei is a bridge or not.nei is a root of the subtree traversred recursively through the dfs function call.If the adjacentnode is already visited, we check whetether it is an earlier visited node than the previous node and we update the low value.
