package hashtables;

import java.util.*;

public class OptimalUtilization {

	public static void main(String... s) {
		
		int[][] a1 = new int[][] {{1,2},{2,4},{3,6}};
		int[][] b1 = new int[][] {{1,2}};
		int target1 = 7;
		List<List<Integer>> output1 = compute(a1,b1,target1);
		System.out.println(" Output1 : " + output1.toString());
		
		int[][] a2 = new int[][] {{1,3},{2,5},{3,7},{4,10}};
		int[][] b2 = new int[][] {{1,2},{2,3},{3,4},{4,5}};
		int target2 = 10;
		List<List<Integer>> output2 = compute(a2,b2,target2);
		System.out.println(" Output2 : " + output2.toString());
		
		int[][] a3 = new int[][] {{1,8},{2,7},{3,14}};
		int[][] b3 = new int[][] {{1,5},{2,10},{3,14}};
		int target3 = 20;
		List<List<Integer>> output3 = compute(a3,b3,target3);
		System.out.println(" Output3 : " + output3.toString());
		
		int[][] a4 = new int[][] {{1,8},{2,15},{3,9}};
		int[][] b4 = new int[][] {{1,8},{2,11},{3,12}};
		int target4 = 20;
		List<List<Integer>> output4 = compute(a4,b4,target4);
		System.out.println(" Output4 : " + output4.toString());
		
		
		
	}

	private static List<List<Integer>> compute(int[][] a, int[][] b, int target) {
		List<List<Integer>> res = new ArrayList<>();
		TreeMap<Integer, List<List<Integer>>> tree = new TreeMap<>();

		for (int i = 0; i < a.length; i++) {
			for (int j = 0; j < b.length; j++) {
				int sum = a[i][1] + b[j][1];
				if (sum <= target) {
					List<List<Integer>> list = tree.computeIfAbsent(sum, (k) -> new ArrayList<>());
					list.add(Arrays.asList(a[i][0], b[j][0]));
				}
			}
		}

		return tree.floorEntry(target).getValue();
	}

}
