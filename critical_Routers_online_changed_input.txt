package hashtables;

import java.util.*;

public class CriticalRouters {

	static int time = 0;
	

	public static void main(String args[]) {

	
		int[][] links1 = { { 1, 2 }, { 1, 3 }, { 3, 4 }, { 1, 4 }, {4, 5} };
		int numRouters1 = 5;
		int numLinks1 = links1.length;
		System.out.println(getCriticalNodes(links1, numLinks1, numRouters1));
	}

	private static List<Integer> getCriticalNodes(int[][] links, int numLinks, int numRouters) {

		Map<Integer, Set<Integer>> map = new HashMap<>();
		for (int i = 1; i <= numRouters; i++) {
			map.put(i, new HashSet<>());
		}
		for (int[] link : links) {
			map.get(link[0]).add(link[1]);
			map.get(link[1]).add(link[0]);
		}
		Set<Integer> set = new HashSet<>();
		int[] low = new int[numRouters+1];
		int[] disc = new int[numRouters+1];
		int parent[] = new int[numRouters+1];
		Arrays.fill(disc, -1);
		Arrays.fill(parent, -1);
		for (int i = 1; i <= numRouters; i++) {
			if (disc[i] == -1)
				dfs(map, low, disc, parent, i, set);
		}
		return new ArrayList<>(set);
	}

	private static void dfs(Map<Integer, Set<Integer>> map, int[] low, int[] disc, int[] parent, int cur,
			Set<Integer> res) {
		int children = 0;
		disc[cur] = low[cur] = ++time;
		for (int nei : map.get(cur)) {
			if (disc[nei] == -1) {
				children++;
				parent[nei] = cur;
				dfs(map, low, disc, parent, nei, res);
				low[cur] = Math.min(low[cur], low[nei]);
				if ((parent[cur] == -1 && children > 1) || (parent[cur] != -1 && low[nei] >= disc[cur]))
					res.add(cur);
			} else if (nei != parent[cur])
				low[cur] = Math.min(low[cur], disc[nei]);
		}
	}
}
